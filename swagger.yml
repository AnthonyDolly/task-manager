openapi: 3.0.3
info:
  title: Task Manager API
  description: >-
    REST API for user authentication, task and project management with real-time
    notifications (Socket.IO) built on Node.js, Express, MongoDB and Redis.
  version: 1.0.0
servers:
  - url: http://localhost:{port}
    description: Local dev server
    variables:
      port:
        default: "3000"
security:
  - BearerAuth: []
tags:
  - name: Health
  - name: Auth
  - name: Users
  - name: Tasks
  - name: Projects
paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '400': { $ref: '#/components/responses/ValidationError' }
        '409': { $ref: '#/components/responses/ConflictError' }
  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout (JWT blacklist)
      security:
        - BearerAuth: []
      responses:
        '204': { description: Logged out }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  /users/me:
    get:
      tags: [Users]
      summary: Get current user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  /users:
    get:
      tags: [Users]
      summary: List all users (admin/demo)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /tasks:
    get:
      tags: [Tasks]
      summary: Get tasks with optional filters & pagination
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - in: query
          name: sort
          schema:
            type: string
          description: Sort expression, default `-createdAt`
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/TaskStatus'
        - in: query
          name: priority
          schema:
            $ref: '#/components/schemas/TaskPriority'
        - in: query
          name: dueBefore
          schema:
            type: string
            format: date-time
        - in: query
          name: project
          schema:
            type: string
        - in: query
          name: assignedTo
          schema:
            type: string
      responses:
        '200':
          description: Paginated tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  page: { type: integer, example: 1 }
                  limit: { type: integer, example: 10 }
                  total: { type: integer, example: 100 }
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '401': { $ref: '#/components/responses/UnauthorizedError' }
    post:
      tags: [Tasks]
      summary: Create task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskInput'
      responses:
        '201':
          description: Created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  /tasks/{id}:
    parameters:
      - $ref: '#/components/parameters/TaskId'
    get:
      tags: [Tasks]
      summary: Get task by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    put:
      tags: [Tasks]
      summary: Update task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskInput'
      responses:
        '200':
          description: Updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Tasks]
      summary: Delete task
      security:
        - BearerAuth: []
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
  /projects:
    get:
      tags: [Projects]
      summary: Get user projects (owned or member)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Paginated projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  page: { type: integer, example: 1 }
                  limit: { type: integer, example: 10 }
                  total: { type: integer, example: 50 }
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
        '401': { $ref: '#/components/responses/UnauthorizedError' }
    post:
      tags: [Projects]
      summary: Create project
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectInput'
      responses:
        '201':
          description: Created project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  /projects/{id}:
    parameters:
      - $ref: '#/components/parameters/ProjectId'
    get:
      tags: [Projects]
      summary: Get project by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    put:
      tags: [Projects]
      summary: Update project
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectInput'
      responses:
        '200':
          description: Updated project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Projects]
      summary: Delete project (detach tasks)
      security:
        - BearerAuth: []
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
  /projects/{id}/members:
    parameters:
      - $ref: '#/components/parameters/ProjectId'
    patch:
      tags: [Projects]
      summary: Manage project members (add/remove)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManageMembersInput'
      responses:
        '200':
          description: Updated project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Page:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
        default: 1
    Limit:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        default: 10
    TaskId:
      in: path
      name: id
      required: true
      schema:
        type: string
    ProjectId:
      in: path
      name: id
      required: true
      schema:
        type: string
  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: Authentication required or token invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ConflictError:
      description: Conflict / Already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        status: { type: integer, example: 400 }
        message: { type: string, example: Validation error }
        requestId: { type: string, example: 550e8400-e29b-41d4-a716-446655440000 }
        details: { type: object }
    AuthToken:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    RegisterInput:
      type: object
      required: [email, password, name]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
        name: { type: string }
    LoginInput:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }
    User:
      type: object
      properties:
        id: { type: string, example: 64fcdf0c2a0b5d5c2a1e9a21 }
        email: { type: string, format: email }
        name: { type: string }
        createdAt: { type: string, format: date-time }
    TaskStatus:
      type: string
      enum: [pending, in-progress, completed]
    TaskPriority:
      type: string
      enum: [low, medium, high]
    Task:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string }
        status: { $ref: '#/components/schemas/TaskStatus' }
        priority: { $ref: '#/components/schemas/TaskPriority' }
        dueDate: { type: string, format: date-time }
        assignedTo: { $ref: '#/components/schemas/User' }
        projectId: { $ref: '#/components/schemas/Project' }
        createdBy: { $ref: '#/components/schemas/User' }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CreateTaskInput:
      type: object
      required: [title]
      properties:
        title: { type: string }
        description: { type: string }
        status: { $ref: '#/components/schemas/TaskStatus' }
        priority: { $ref: '#/components/schemas/TaskPriority' }
        dueDate: { type: string, format: date-time }
        assignedTo: { type: string }
        projectId: { type: string }
    UpdateTaskInput:
      allOf:
        - $ref: '#/components/schemas/CreateTaskInput'
    Project:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        ownerId: { $ref: '#/components/schemas/User' }
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CreateProjectInput:
      type: object
      required: [name]
      properties:
        name: { type: string }
        description: { type: string }
    UpdateProjectInput:
      allOf:
        - $ref: '#/components/schemas/CreateProjectInput'
    ManageMembersInput:
      type: object
      required: [operations]
      properties:
        operations:
          type: array
          items:
            type: object
            required: [action, userIds]
            properties:
              action:
                type: string
                enum: [add, remove]
              userIds:
                type: array
                items:
                  type: string 